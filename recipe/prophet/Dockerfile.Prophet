FROM ubuntu:20.04 AS quantlib_stage

USER root
ENV DEBIAN_FRONTEND noninteractive
ARG TAG=latest
ARG QUANTLIB_VERSION=1.22
ARG PYTHON_VERSION=3.8
ARG TALIB_VERSION=0.4.0
ARG MLPACK_VERSION=3.4.2

ENV QUANTLIB_VERSION="${QUANTLIB_VERSION}"
ENV PYTHON_VERSION="${PYTHON_VERSION}"
ENV TALIB_VERSION="${TALIB_VERSION}"
ENV MLPACK_VERSION="${MLPACK_VERSION}"
ENV BOOST=/usr/include/boost

ENV LC_NUMERIC=C
ENV LANG=en_US.UTF-8
#ENV LC_ALL=en_GB.UTF-8

RUN apt-get update
RUN apt-get -y install git sudo wget curl software-properties-common build-essential gcc
RUN apt-get -y install libboost-dev libboost-all-dev libboost-math-dev libboost-test-dev libboost-serialization-dev
RUN apt-get -y install cmake protobuf-compiler python3-setuptools python3 python3-pip libpng-dev apt-utils python-dev python3-pandas python3-numpy cython3

RUN apt-get -y install libarmadillo-dev binutils-dev
RUN  wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-"${TALIB_VERSION}"-src.tar.gz \
    && tar xzf ta-lib-"${TALIB_VERSION}"-src.tar.gz \
    && rm ta-lib-"${TALIB_VERSION}"-src.tar.gz \
    && cd ta-lib* \
    && ./configure PYTHON=/usr/bin/python"${PYTHON_VERSION}" --prefix=/usr  \
    && make && sudo make install && ldconfig  && sudo ldconfig && rm -rf \tab-lib
RUN pip install ta-lib

RUN wget https://github.com/lballabio/QuantLib/releases/download/QuantLib-v"${QUANTLIB_VERSION}"/QuantLib-"${QUANTLIB_VERSION}".tar.gz \
    && tar xfz QuantLib-"${QUANTLIB_VERSION}".tar.gz \
    && rm QuantLib-"${QUANTLIB_VERSION}".tar.gz \
    && cd QuantLib-"${QUANTLIB_VERSION}" \
    && ./configure --prefix=/usr --disable-static CXXFLAGS=-O3 \
    && make -j 10 && make check && sudo make install && ldconfig && sudo ldconfig\
    && cd .. && rm -rf QuantLib-"${QUANTLIB_VERSION}"

RUN wget https://github.com/lballabio/QuantLib-SWIG/releases/download/QuantLib-SWIG-v"${QUANTLIB_VERSION}"/QuantLib-SWIG-"${QUANTLIB_VERSION}".tar.gz \
    && tar xfz QuantLib-SWIG-"${QUANTLIB_VERSION}".tar.gz \
    && rm QuantLib-SWIG-"${QUANTLIB_VERSION}".tar.gz \
    && cd QuantLib-SWIG-"${QUANTLIB_VERSION}" \
    && ./configure PYTHON=/usr/bin/python"${PYTHON_VERSION}" --prefix=/usr --disable-static CXXFLAGS=-O3 \
    && make -j 10 && make check && sudo make -C Python install && ldconfig  && sudo ldconfig \
    && cd .. && rm -rf QuantLib-SWIG-"${QUANTLIB_VERSION}"

RUN wget https://www.mlpack.org/files/mlpack-"${MLPACK_VERSION}".tar.gz \
    && tar xvzpf mlpack-"${MLPACK_VERSION}".tar.gz  \
    && rm mlpack-"${MLPACK_VERSION}".tar.gz \
    && mkdir mlpack-"${MLPACK_VERSION}"/build && cd mlpack-"${MLPACK_VERSION}"/build \
    && cmake BUILD_PYTHON_BINDINGS=ON PYTHON_EXECUTABLE=/usr/bin/python"${PYTHON_VERSION}" ../ \
    && make -j 10 && make install  && ldconfig  && sudo ldconfig \
    && cd / && rm -rf mlpack-"${MLPACK_VERSION}"
RUN pip install mlpack

ENV LD_LIBRARY_PATH="/usr/local/lib:/usr/lib:${LD_LIBRARY_PATH}"

RUN pip install --upgrade setuptools
RUN pip install cython matplotlib tmval chainladder statsmodels
RUN pip install sqlalchemy bokeh pysmbclient numba quandl pytrends mplfinance plotly
RUN pip install tensortrade[tf,tensorforce,baselines,ccxt,fbm]

# Custom packages
#STEP 1 :Fundamental Screener
RUN pip install finvizfinance

#STEP 2 :Create/Assess exiting portfolio
RUN pip install riskfolio-lib
RUN pip install pyqlib
#STEP 2 : Fetch Screened stocks historical data

#STEP 3 : Extrapolate using multiple models from historical data & add technical indicators

#STEP 4 : Fetch/Simulated Options Chain

#STEP 5 : Generate buy signals for stock, with probability, confidence and returns on extrapolated data

#STEP 6 : Marry with Options Chain data.

#STEP 7 : Create Options Vs Stock Strategies.

#STEP 8 : Simulate Portfolios with Strategies from Step 7.

#STEP 9 : Identify delta from existing portfolio and recommend combination of Stocks/Options for Buy/Sell
#RUN sudo pip install pystan==2.19.1.1
#RUN sudo pip install fbprophet

RUN sudo pip install neuralprophet

#Step 11 : Install customized pip packages from git
RUN sudo pip install git+https://github.com/lakhwindersingh/tensortrade.git



# Setup for Jupyter Notebook
RUN groupadd -g 1000 jupyter && \
    useradd -g jupyter -m -s /bin/bash jupyter && \
    mkdir -p /etc/sudoers.d /root/.jupyter  /home/jupyter/.jupyter /home/jupyter/notebook&& \
    echo "jupyter:jupyter" | chpasswd && \
    echo "jupyter ALL=(ALL) NOPASSWD: ALL" > /etc/sudoers.d/jupyter && \
    chmod -R a+rwX  /etc/sudoers.d/jupyter /home/jupyter && \
    echo "/usr/lib" >  /etc/ld.so.conf.d/nbquant.conf && \
    echo "/usr/local/lib" >>  /etc/ld.so.conf.d/nbquant.conf && \
    ldconfig  &&\
    echo "export LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:$LD_LIBRARY_PATH" > /etc/profile.d/jupyter.sh && \
    echo "export PATH=/usr/local/bin:/usr/bin:$PATH" >> /etc/profile.d/jupyter.sh && \
    cp /etc/profile.d/jupyter.sh /root/.bashrc && \
    # Below file enable password access instead of token
    echo "c.NotebookApp.token = 'jupyter'" > /root/.jupyter/jupyter_notebook_config.py &&\
    echo "c.NotebookApp.notebook_dir = '/home/jupyter/notebook/'" >> /root/.jupyter/jupyter_notebook_config.py &&\
    cp /root/.jupyter/jupyter_notebook_config.py /home/jupyter/.jupyter

USER jupyter
RUN pip install --user jupyter jupyterlab

USER root
# Add shell script to start postfix and jupyter
#RUN apt-get update && apt-get install sudo
COPY entrypoint.sh /usr/local/bin
RUN chmod +x /usr/local/bin/entrypoint.sh
EXPOSE 8282 9000 443
WORKDIR /home/jupyter/
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

CMD []